resources:
- repo: self

pool:
  name: Hosted VS2017
  demands: Cmd

steps:
- task: VisualStudioTestPlatformInstaller@1
  inputs:
    packageFeedSelector: 'nugetOrg' # Options: nugetOrg, customFeed, netShare
    versionSelector: 'latestStable' # Required when packageFeedSelector == NugetOrg || PackageFeedSelector == CustomFeed# Options: latestPreRelease, latestStable, specificVersion
    #testPlatformVersion: # Required when versionSelector == SpecificVersion
    #customFeed: # Required when packageFeedSelector == CustomFeed
    #username: # Optional
    #password: # Optional
    #netShare: # Required when packageFeedSelector == NetShare
- script: CALL .scripts/restore.cmd
  displayName: 'Restore dependencies'
  env:
    nugetPath: $(Build.SourcesDirectory)\vowpalwabbit\.nuget\nuget.exe
  failOnStderr: true
- script: CALL .scripts/build.cmd
  displayName: 'Build vw.sln'
  env:
    nugetPath: $(Build.SourcesDirectory)\vowpalwabbit\.nuget\nuget.exe
  failOnStderr: true
- script: CALL .scripts/test.cmd
  displayName: 'Run tests'
  env:
    nugetPath: $(Build.SourcesDirectory)\vowpalwabbit\.nuget\nuget.exe
  failOnStderr: false
- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFormat: VSTest
    testResultsFiles: '**/vowpalwabbit/out/test/Release/x64/*.trx'
- script: CALL .scripts/package.cmd
  displayName: 'Package artifacts'
  env:
    Tag: -$(Build.SourceVersion)--$(Build.BuildId)
    nugetPath: $(Build.SourcesDirectory)\vowpalwabbit\.nuget\nuget.exe
  failOnStderr: true
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: target'
  inputs:
    PathtoPublish: $(Build.SourcesDirectory)\vowpalwabbit\out\target
    ArtifactName: target
  condition: succeededOrFailed()
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: package'
  inputs:
    PathtoPublish: $(Build.SourcesDirectory)\vowpalwabbit\out\package
    ArtifactName: package
  condition: succeededOrFailed()